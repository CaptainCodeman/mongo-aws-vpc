{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "MongoDB replica slave in secondary availability zone with single EBS volume for easy backup",

  "Parameters" : {
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access",
      "Type"        : "String"
    },

    "InstanceType" : {
      "Type" : "String",
      "Default" : "t1.micro",
      "AllowedValues" : [ "t1.micro", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.xlarge", "m3.2xlarge", "c1.xlarge", "cc1.4xlarge" ],
      "Description"   : "EC2 instance type (e.g. m1.small, m1.large, m1.xlarge, m2.xlarge)"
    },

    "VolumeSize" : {
      "Description" : "Volume size for EBS volume",
      "Type"        : "Number",
      "Default"     : "20"
    },

    "MasterName" : {
      "Description" : "Name for the MongoDB master node",
      "Type"        : "String",
      "Default"     : "mongodb01",
      "AllowedPattern" : "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$",
      "MinLength": "1",
      "MaxLength": "128",
      "ConstraintDescription" : "hostname must conform to RFC 1123"
    },

    "HostName" : {
      "Description" : "Name for the MongoDB server",
      "Type"        : "String",
      "Default"     : "mongodb99",
      "AllowedPattern" : "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$",
      "MinLength": "1",
      "MaxLength": "128",
      "ConstraintDescription" : "hostname must conform to RFC 1123"
    },

    "DomainName" : {
        "Description" : "Private domain name suffix",
        "Type" : "String",
        "Default" : "local",
        "AllowedPattern" : "^[a-z0-9\\.]{1,30}$",
        "ConstraintDescription" : "must contain 1-30 alphanumeric characters"
    },

    "ReplicaSetName" : {
      "Description" : "Name for the MongoDB replica set",
      "Type"        : "String",
      "Default"     : "vpc"
    },

    "SubnetId" : {
      "Description" : "The subnet that this instance will be launched in",
      "Type"        : "String"
    },

    "OpLogSize" : {
      "Description" : "Size of the OpLog",
      "Type"        : "Number",
      "Default"     : "2048"
    },

    "DefaultSecurityGroupId": {
      "Description" : "VPC default security group",
      "Type"       : "String"
    },

    "DatabaseSecurityGroupId": {
      "Description" : "VPC database security group",
      "Type"       : "String"
    },

    "CfnAccessKey" : {
      "Description" : "The cloud formation access key",
      "Type": "String",
      "NoEcho" : "true"
    },

    "CfnSecretKey" : {
      "Description" : "The cloud formation secret key",
      "Type": "String",
      "NoEcho" : "true"
    },

    "StackNameOrId" : {
      "Description" : "The stack name or id",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "128"
    }
  },

  "Mappings" : {
      "InstanceTypeArch" : {
          "t1.micro"       : { "Arch" : "64" },
          "m1.small"       : { "Arch" : "64" },
          "m1.medium"      : { "Arch" : "64" },
          "m1.large"       : { "Arch" : "64" },
          "m1.xlarge"      : { "Arch" : "64" },
          "m2.xlarge"      : { "Arch" : "64" },
          "m2.2xlarge"     : { "Arch" : "64" },
          "m2.4xlarge"     : { "Arch" : "64" },
          "m3.xlarge"      : { "Arch" : "64" },
          "m3.2xlarge"     : { "Arch" : "64" },
          "c1.medium"      : { "Arch" : "64" },
          "c1.xlarge"      : { "Arch" : "64" },
          "cc1.4xlarge"    : { "Arch" : "64HVM" }
      },

      "RegionImageZone" : {
          "us-east-1"      : { "64" : "ami-1624987f", "64HVM" : "ami-02f54a6b" },
          "us-west-2"      : { "64" : "ami-2a31bf1a", "64HVM" : "NOT_YET_SUPPORTED" },
          "us-west-1"      : { "64" : "ami-1bf9de5e", "64HVM" : "NOT_YET_SUPPORTED" },
          "eu-west-1"      : { "64" : "ami-c37474b7", "64HVM" : "ami-1b02026f" },
          "sa-east-1"      : { "64" : "ami-1e08d103", "64HVM" : "NOT_YET_SUPPORTED" },
          "ap-southeast-1" : { "64" : "ami-a6a7e7f4", "64HVM" : "NOT_YET_SUPPORTED" },
          "ap-northeast-1" : { "64" : "ami-4e6cd34f", "64HVM" : "NOT_YET_SUPPORTED" },
          "ap-southeast-2" : { "64" : "ami-bd990e87", "64HVM" : "NOT_YET_SUPPORTED" }
      }
  },

  "Resources" : {
    "MongoInstance" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "mdadm" : [ ],
                "sysstat" : [ ],
                "xfsprogs": [ ]
              }
            },
            "files"    : {
              "/etc/yum.repos.d/10gen.repo" : {
                "content" : { "Fn::Join" : [ "\n", [ "[10gen]", "name=10gen Repository", "baseurl=http://downloads-distro.mongodb.org/repo/redhat/os/x86_64", "gpgcheck=0" ] ] },
                "mode"    : "000644",
                "owner"   : "root",
                "group"   : "root"
              }
            }
          },
          "HostName" : { "Ref" : "HostName" }
        }
      },
      "Properties" : {
        "SubnetId"         : { "Ref" : "SubnetId" },
        "InstanceType"     : { "Ref" : "InstanceType" },
        "ImageId"          : { "Fn::FindInMap" : [ "RegionImageZone", { "Ref" : "AWS::Region" }, { "Fn::FindInMap" : [ "InstanceTypeArch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
        "SecurityGroupIds" : [ { "Ref" : "DefaultSecurityGroupId" }, { "Ref" : "DatabaseSecurityGroupId" } ],
        "DisableApiTermination": "false",
        "KeyName"          : { "Ref" : "KeyName" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Ref" : "HostName" } },
          { "Key" : "Application", "Value" : { "Ref" : "StackNameOrId" } },
          { "Key" : "Network", "Value" : "Private" },
          { "Key" : "Type", "Value" : "Mongo" }
        ],
        "UserData"         : { "Fn::Base64" : { "Fn::Join" : [ "",
        [
            "#!/bin/bash\n",
            "yum update -y aws-cfn-bootstrap\n",

            "## Error reporting helper function\n",
            "function error_exit\n",
            "{\n",
            "   /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" },
            "'\n",
            "   exit 1\n",
            "}\n",

            "## Initialize CloudFormation bits\n",
            "/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackName" },
            " -r MongoInstance",
            "   --access-key ", { "Ref" : "CfnAccessKey" },
            "   --secret-key ", { "Ref" : "CfnSecretKey" },
            "   --region ", { "Ref" : "AWS::Region" },
            " > /tmp/cfn-init.log 2>&1 || error_exit $(</tmp/cfn-init.log)\n",

            "# Set hostname\n",
            "LOCALIPV4=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)\n",
            "hostname ", { "Ref" : "HostName" },"\n",
            "sed -i 's/HOSTNAME=.*$/HOSTNAME=", { "Ref" : "HostName" },"/g' /etc/sysconfig/network\n",
            "echo \"127.0.0.1 localhost\" > /etc/hosts\n",
            "echo \"$LOCALIPV4 ", { "Ref" : "HostName" },".", { "Ref" : "DomainName" }," ", { "Ref" : "HostName" },"\" >> /etc/hosts\n",

            "## Waiting for EBS mounts to become available\n",
            "while [ ! -e /dev/sdh1 ]; do echo waiting for /dev/sdh1 to attach; sleep 10; done\n",

            "## Set read-ahead on each device\n",
            "blockdev --setra 16 /dev/sdh1\n",

            "## Create filesystems and mount point info\n",
            "mkfs.xfs -f -l version=2,lazy-count=1,size=64m /dev/sdh1/data > /tmp/mkfs.xfs.1.log 2>&1\n",
            "mkdir /data\n",
            "echo '/dev/sdh1/data /data xfs defaults,auto,noatime,nodiratime,noexec,logbufs=8,logbsize=256k,osyncisdsync,barrier,largeio 0 0' | tee -a /etc/fstab\n",
            "mount /data > /tmp/mountdata.log 2>&1\n",

            "## Raise file descriptor limits\n",
            "echo '* hard nofile 100000' | tee -a /etc/security/limits.conf\n",
            "echo '* soft nofile 100000' | tee -a /etc/security/limits.conf\n",
            "ulimit -n 64000\n",
            "ulimit -3 32000\n",

            "## Install MongoDB\n",
            "yum -y install mongo-10gen-server > /tmp/yum-mongo.log 2>&1\n",

            "## Create data folders\n",
            "mkdir /data/db\n",
            "mkdir /data/log\n",
            "mkdir /data/journal\n",
            "chown -R mongod:mongod /data > /tmp/chown1.log 2>&1\n",
            "chown -R mongod:mongod /data/db > /tmp/chown2.log 2>&1\n",
            "chown -R mongod:mongod /data/log > /tmp/chown3.log 2>&1\n",
            "chown -R mongod:mongod /data/journal > /tmp/chown4.log 2>&1\n",

            "## Update mongod configuration\n",
            "cat <<EOF > /etc/mongod.conf\n",
            "logpath=/data/log/mongod.log\n",
            "logappend=true\n",
            "fork=true\n",
            "directoryperdb=true\n",
            "rest=true\n",
            "replSet=", { "Ref" : "ReplicaSetName" },
            "\n",
            "oplogSize=", { "Ref" : "OpLogSize" },
            "\n",
            "EOF\n",

            "## Start mongod & configure replica set n",
            "/etc/init.d/mongod start > /tmp/mongod-start.log 2>&1\n",

            "cat <<EOF > /tmp/mongo-init-slave.js\n",
            "rs.add({_id: 1, host: \"", { "Ref" : "HostName" },":27017\", priority: 0, hidden: true})\n",
            "EOF\n",

            "mongo ", { "Ref" : "HostName" },"/admin /tmp/mongo-init-slave.js > /tmp/mongo-init-slave.log 2>&1\n",

            "## CloudFormation signal that setup is complete\n",
            "/opt/aws/bin/cfn-signal -e 0 -r \"MongoInstance setup complete\" '", { "Ref" : "WaitHandle" }, "'\n"
        ] ] } }
      }
    },

    "MongoVolume1" : {
      "Type" : "AWS::EC2::Volume",
      "Properties" : {
        "Size" : { "Ref" : "VolumeSize" },
        "AvailabilityZone" : { "Fn::GetAtt" : [ "MongoInstance", "AvailabilityZone" ] }
      }
    },

    "MongoVolumeMount1" : {
      "Type" : "AWS::EC2::VolumeAttachment",
      "Properties" : {
        "InstanceId" : { "Ref" : "MongoInstance" },
        "VolumeId"   : { "Ref" : "MongoVolume1" },
        "Device"     : "/dev/sdh1"
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "MongoInstance",
      "Properties" : {
        "Handle" : {  "Ref" : "WaitHandle" },
        "Timeout" : "300"
      }
    }
  },

  "Outputs" : {
    "PrivateIp" : {
      "Value" : {  "Fn::GetAtt" : [ "MongoInstance", "PrivateIp" ] },
      "Description" : "Private IP Address of the new mongo instance"
    },

    "HostName" : {
      "Value" : { "Ref" : "HostName" },
      "Description" : "HostName of the new mongo instance"
    },

    "DnsName" : {
      "Value" : { "Fn::Join" : [ ".", [ { "Ref" : "HostName" }, { "Ref" : "DomainName" } ] ] },
      "Description" : "DNS name of the new mongo instance"
    }
  }
}
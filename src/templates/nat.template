{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Create NAT instance for private subnets which also functions as bastion server to provide VPN access",

  "Parameters": {
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },

    "SSHFrom" : {
      "Description" : "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
      "Type" : "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
    },

    "InstanceType" : {
      "Description" : "NAT Device EC2 instance type",
      "Type" : "String",
      "Default" : "t1.micro",
      "AllowedValues" : [ "t1.micro","m1.small","m1.medium","m1.large","m1.xlarge","m2.xlarge","m2.2xlarge","m2.4xlarge","c1.medium","c1.xlarge","cc1.4xlarge","cc2.8xlarge","cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },

    "PrivateIpAddress" : {
      "Description" : "Private IP Address of NAT instance within public subnet",
      "Type" : "String",
      "MinLength": "7",
      "MaxLength": "15",
      "Default" : "10.0.0.5",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
      "ConstraintDescription" : "must be a valid IP Address range of the form x.x.x.x"
    },

    "VpcId" : {
      "Description" : "Id of the VPC that this NAT device is for",
      "Type" : "String"
    },

    "VpcCidr" : {
      "Description" : "CIDR block of the VPC",
      "Type" : "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default" : "10.0.0.0/16",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
    },

    "PublicSubnetId" : {
      "Description" : "Id of the public subnet that this NAT device should be launched in",
      "Type" : "String"
    },

    "DomainName" : {
        "Description" : "Private domain name suffix",
        "Type" : "String",
        "Default" : "local",
        "AllowedPattern" : "^[a-z0-9\\.]{1,30}$",
        "ConstraintDescription" : "must contain 1-30 alphanumeric characters"
    },

    "DefaultSG": {
      "Description" : "The default VPC security group for instances",
      "Type": "String"
    },

    "DatabaseSG": {
      "Description" : "The security group for database instances",
      "Type": "String"
    },

    "StackNameOrId" : {
      "Description" : "The stack Nnme or Id",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "128"
    },

    "NetworkAcl": {
      "Description" : "The network ACL of the public subnet this NAT instance is in",
      "Type": "String"
    },

    "CfnAccessKey" : {
      "Description" : "The cloud formation access key",
      "Type": "String",
      "NoEcho" : "true"
    },

    "CfnSecretKey" : {
      "Description" : "The cloud formation secret key",
      "Type": "String",
      "NoEcho" : "true"
    },

    "AmazonProvidedDNS" : {
      "Description" : "Amazon provided DNS",
      "Type": "String",
      "Default" : "10.0.0.2",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
      "ConstraintDescription" : "must be a valid IP Address range of the form x.x.x.x"
    },

    "MMSApiKey" : {
      "Description" : "The MMS Api key",
      "Type": "String"
    },

    "MMSSecretKey" : {
      "Description" : "The MMS secret key",
      "Type": "String"
    },

    "VpnPassword" : {
      "Description" : "The openvpn password",
      "Type": "String",
      "NoEcho" : "true"
    }
  },

  "Mappings" : {
    "AWSNATAMI" : {
      "us-east-1"      : { "AMI" : "ami-f619c29f" },
      "us-west-1"      : { "AMI" : "ami-3bcc9e7e" },
      "us-west-2"      : { "AMI" : "ami-52ff7262" },
      "eu-west-1"      : { "AMI" : "ami-e5e2d991" },
      "sa-east-1"      : { "AMI" : "ami-0039e61d" },
      "ap-southeast-1" : { "AMI" : "ami-02eb9350" },
      "ap-northeast-1" : { "AMI" : "ami-14d86d15" },
      "ap-southeast-2" : { "AMI" : "ami-ab990e91" }
    }
  },

  "Resources" : {
    "NATRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [ {
            "Effect": "Allow",
            "Principal": { "Service": [ "ec2.amazonaws.com" ] },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies": [ {
          "PolicyName": "root",
          "PolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "ec2:DescribeInstances",
                  "ec2:DescribeTags"
                ],
                "Resource": "*"
              }
            ]
          }
        } ]
      }
    },

    "NATInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "NATRole" } ]
      }
    },

    "NATIPAddress" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      }
    },

    "NATIPAssociation" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "Properties" : {
        "InstanceId" : { "Ref" : "NATInstance" },
        "AllocationId" : { "Fn::GetAtt": [ "NATIPAddress", "AllocationId" ] }
      }
    },

    "DefaultSecurityGroupSSHIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "DefaultSG" },
        "IpProtocol": "tcp",
        "FromPort": "22",
        "ToPort": "22",
        "SourceSecurityGroupId": { "Ref": "NATSecurityGroup" }
      }
    },

    "DefaultSecurityGroupRDPIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "DefaultSG" },
        "IpProtocol": "tcp",
        "FromPort": "3389",
        "ToPort": "3389",
        "SourceSecurityGroupId": { "Ref": "NATSecurityGroup" }
      }
    },

    "DatabaseSecurityGroupMongoIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "DatabaseSG" },
        "IpProtocol": "tcp",
        "FromPort": "27017",
        "ToPort": "27017",
        "SourceSecurityGroupId": { "Ref": "NATSecurityGroup" }
      }
    },

    "DatabaseSecurityGroupMongoWebIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": { "Ref": "DatabaseSG" },
        "IpProtocol": "tcp",
        "FromPort": "28017",
        "ToPort": "28017",
        "SourceSecurityGroupId": { "Ref": "NATSecurityGroup" }
      }
    },

    "NetworkAclEntryInboundSSH" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "RuleNumber" : "500",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Ref" : "SSHFrom" },
        "PortRange" : { "From" : "22", "To" : "22" }
      }
    },

    "NetworkAclEntryInboundRDP" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "Properties" : {
        "NetworkAclId" : { "Ref" : "NetworkAcl" },
        "RuleNumber" : "510",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : { "Ref" : "SSHFrom" },
        "PortRange" : { "From" : "3389", "To" : "3389" }
      }
    },

    "NATSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable internal access to the NAT device",
        "VpcId" : { "Ref" : "VpcId" },
        "SecurityGroupIngress" : [
           { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref" : "DefaultSG" } },
           { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "SourceSecurityGroupId" : { "Ref" : "DefaultSG" } },
           { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : { "Ref" : "SSHFrom" } },
           { "IpProtocol" : "tcp", "FromPort" : "943", "ToPort" : "943", "CidrIp" : { "Ref" : "SSHFrom" } },
           { "IpProtocol" : "tcp", "FromPort" : "946", "ToPort" : "946", "CidrIp" : { "Ref" : "SSHFrom" } },
           { "IpProtocol" : "udp", "FromPort" : "1194", "ToPort" : "1194", "CidrIp" : { "Ref" : "SSHFrom" } },
           { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : { "Ref" : "SSHFrom" } },
           { "IpProtocol" : "tcp", "FromPort" : "3389",  "ToPort" : "3389",  "CidrIp" : { "Ref" : "SSHFrom" } },
           { "IpProtocol" : "udp", "FromPort" : "53", "ToPort" : "53", "CidrIp" : { "Ref" : "VpcCidr" } } ],
        "SecurityGroupEgress" : [
           { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22", "SourceSecurityGroupId" : { "Ref" : "DefaultSG" } },
           { "IpProtocol" : "tcp", "FromPort" : "3389",  "ToPort" : "3389",  "SourceSecurityGroupId" : { "Ref" : "DefaultSG" } },
           { "IpProtocol" : "udp", "FromPort" : "53",  "ToPort" : "53",  "CidrIp" : { "Fn::Join" : [ "/", [ { "Ref" : "AmazonProvidedDNS" }, "32" ] ] } },
           { "IpProtocol" : "tcp", "FromPort" : "27017",  "ToPort" : "27017",  "SourceSecurityGroupId" : { "Ref" : "DatabaseSG" } },
           { "IpProtocol" : "tcp", "FromPort" : "28017",  "ToPort" : "28017",  "SourceSecurityGroupId" : { "Ref" : "DatabaseSG" } } ]
      }
    },

    "NATInstance" : {
      "Type" : "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "packages" : {
              "yum" : {
                "dnsmasq" : [],
                "gcc" : [ ],
                "python-devel" : [ ]
              }
            },
            "files" : {
              "/etc/dnsmasq.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "log-facility=/var/log/dnsmasq.log\n",
                  "filterwin2k\n",
                  "domain-needed\n",
                  "expand-hosts\n",
                  "no-hosts\n",
                  "no-resolv\n",
                  "local-ttl=3600\n",
                  "addn-hosts=/etc/hosts.dnsmasq\n",
                  "domain=", { "Ref" : "DomainName" },"\n",
                  "local=/", { "Ref" : "DomainName" },"/\n",
                  "server=", { "Ref" : "AmazonProvidedDNS" },"\n",
                  "txt-record=what,DNS Server for Amazon VPC"
                  ] ]
                },
                "mode" : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/etc/hosts.dnsmasq" : {
                "content" : { "Fn::Join" : [" ", [ { "Ref": "PrivateIpAddress" }, "nat" ] ] },
                "mode" : "000644",
                "owner" : "root",
                "group" : "root"
              },
              "/usr/local/bin/update-hosts.sh" : {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/bash\n",

                  "export EC2_HOME=/opt/aws/apitools/ec2\n",
                  "export PATH=$PATH:$EC2_HOME/bin\n",
                  "export JAVA_HOME=/usr/lib/jvm/jre\n",

                  "INSTANCES=$(/opt/aws/bin/ec2-describe-instances --filter \"vpc-id=", { "Ref" : "VpcId" }, "\")\n",
                  "join -o 2.2,1.2 <(echo \"$INSTANCES\" | grep '^TAG\\sinstance.*\\sName' | cut -f 3,5) <(echo \"$INSTANCES\" | grep ^INSTANCE | cut -f 2,18) > /etc/hosts.dnsmasq\n",
                  "pkill -HUP dnsmasq\n"
                  ] ]
                },
                "mode" : "000744",
                "owner" : "root",
                "group" : "root"
              }
            },
            "sources" : {
              "/opt" : "https://mms.10gen.com/settings/10gen-mms-agent.zip"
            },
            "services" : {
              "sysvinit" : {
                "dnsmasq" : {
                  "enabled" : "true",
                  "ensureRunning" : "true",
                  "files" : [ "/etc/dnsmasq.conf" ],
                  "packages": { "yum" : ["dnsmasq"] }
                }
              }
            }
          }
        },
        "CName" : "nat",
        "Hostname" : { "Fn::Join" : [ ".", [ "nat", { "Ref" : "DomainName" } ] ] }
      },
      "Properties" : {
        "InstanceType" : { "Ref" : "InstanceType" },
        "SubnetId" : { "Ref" : "PublicSubnetId" },
        "SourceDestCheck" : "false",
        "ImageId" : { "Fn::FindInMap" : [ "AWSNATAMI", { "Ref" : "AWS::Region" }, "AMI" ]},
        "SecurityGroupIds" : [ { "Ref" : "DefaultSG" }, { "Ref" : "NATSecurityGroup" }],
        "KeyName": { "Ref": "KeyName" },
        "DisableApiTermination": "false",
        "IamInstanceProfile": { "Ref": "NATInstanceProfile" },
        "Tags" : [
          { "Key" : "Name", "Value" : "nat" },
          { "Key" : "Application", "Value" : { "Ref" : "StackNameOrId" } },
          { "Key" : "Network", "Value" : "Public" },
          { "Key" : "Type", "Value" : "Nat" }
        ],
        "PrivateIpAddress": { "Ref": "PrivateIpAddress" },
        "UserData"         : { "Fn::Base64" : { "Fn::Join" : [ "",
        [
            "#!/bin/bash\n",
            "yum update -y aws-cfn-bootstrap\n",

            "# Error reporting helper function\n",
            "function error_exit\n",
            "{\n",
            "   /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref" : "WaitHandle" },
            "'\n",
            "   exit 1\n",
            "}\n",

            "# Initialize CloudFormation bits\n",
            "/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackName" },
            " -r NATInstance",
            "   --access-key ", { "Ref" : "CfnAccessKey" },
            "   --secret-key ", { "Ref" : "CfnSecretKey" },
            "   --region ", { "Ref" : "AWS::Region" },
            " > /tmp/cfn-init.log 2>&1 || error_exit $(</tmp/cfn-init.log)\n",

            "# Upgrade to latest and greatest ...\n",
            "yum upgrade -y\n",

            "# Set hostname\n",
            "hostname nat\n",
            "sed -i 's/HOSTNAME=.*$/HOSTNAME=nat/g' /etc/sysconfig/network\n",
            "echo \"127.0.0.1 localhost\" > /etc/hosts\n",
            "echo \"", { "Ref": "PrivateIpAddress" }, " nat.", { "Ref" : "DomainName" }," nat\" >> /etc/hosts\n",

            "# Update running hosts\n",
            "/usr/local/bin/update-hosts.sh > /var/log/update-hosts.log\n",
            "cat <(crontab -l) <(echo \"*/5 * * * * /usr/local/bin/update-hosts.sh\") | crontab -\n",

            "# Install and configure OpenVPN\n",
            "wget http://swupdate.openvpn.org/as/openvpn-as-1.8.4-RHEL5.x86_64.rpm\n",
            "rpm -i openvpn-as-1.8.4-RHEL5.x86_64.rpm\n",
            "rm openvpn-as-1.8.4-RHEL5.x86_64.rpm\n",
            "sed -i 's/openvpnas_gen_init/openvpnas_gen_init --distro redhat/g' /usr/local/openvpn_as/bin/_ovpn-init\n",
            "/usr/local/openvpn_as/bin/ovpn-init --force --batch --host ", { "Ref" : "NATIPAddress" }, " --ec2 --local_auth > /var/log/ovpn-init.log\n",
            "echo \"openvpn:", { "Ref" : "VpnPassword" } ,"\" | chpasswd\n",

            "# Install MongoMonitoringService\n",
            "\n",
            "easy_install pymongo\n",
            "sed -i s/@API_KEY@/", { "Ref" : "MMSApiKey" } ,"/g /opt/mms-agent/settings.py\n",
            "sed -i s/@SECRET_KEY@/", { "Ref" : "MMSSecretKey" } ,"/g /opt/mms-agent/settings.py\n",
            "echo \"nohup python /opt/mms-agent/agent.py > /var/log/mms-agent.log 2>&1 &\" >> /etc/rc.local\n",

            "# CloudFormation signal that setup is complete\n",
            "/opt/aws/bin/cfn-signal -e 0 -r \"NatInstance setup complete\" '", { "Ref" : "WaitHandle" }, "'\n",

            "# Reboot required ?",
            "reboot"
        ] ] } }
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "NATInstance",
      "Properties" : {
        "Handle" : {  "Ref" : "WaitHandle" },
        "Timeout" : "600"
      }
    }
  },

  "Outputs" : {
    "InstanceId" : {
      "Value" : { "Ref" : "NATInstance" },
      "Description" : "The NAT device instance Id"
    },

    "RemoteAccess" : {
      "Value" : { "Fn::Join" : ["", [ "https://", { "Fn::GetAtt": [ "NATInstance", "PublicIp" ] }, "/admin" ]]},
      "Description" : "The remote access address"
    }
  }
}

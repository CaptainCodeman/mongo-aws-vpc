{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "MongoDB replica set with cross-availability-zone backup on VPC with security",

  "Parameters" : {
    "KeyName" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },
    "SSHFrom" : {
      "Description" : "Lockdown SSH access to the bastion host (default can be accessed from anywhere)",
      "Type" : "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "PrimaryAZ" : {
        "Description" : "Availability zone for the primary public and private subnet",
        "Type": "String",
        "AllowedValues": [ "a", "b", "c", "d", "e" ],
        "Default": "a"
    },
    "SecondaryAZ" : {
        "Description" : "Availability zone for the secondary private subnet",
        "Type": "String",
        "AllowedValues": [ "a", "b", "c", "d", "e" ],
        "Default": "b"
    },
    "DomainName" : {
        "Description" : "Private domain name suffix",
        "Type" : "String",
        "Default" : "local",
        "AllowedPattern" : "^[a-z0-9\\.]{1,30}$",
        "ConstraintDescription" : "must contain 1-30 alphanumeric characters"
    },
    "TemplateBucket" : {
        "Description" : "S3 bucket for templates",
        "Type" : "String",
        "Default" : "intesoft-cloudformation"
    }
  },

  "Resources" : {
    "CfnUser" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Statement":[{
              "Effect":"Allow",
              "Action":"cloudformation:DescribeStackResource",
              "Resource":"*"
            }]
          }
        }]
      }
    },

    "CfnAccessKey" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : {"Ref": "CfnUser"}
      }
    },

    "VPC" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Metadata" : {
        "Comment" : "VPC"
      },
      "Properties" : {
        "TemplateURL"      : { "Fn::Join" : ["/", [ "https://s3.amazonaws.com", { "Ref" : "TemplateBucket" }, { "Ref" : "AWS::Region" }, "vpc.template" ] ] },
        "Parameters" : {
          "KeyName"        : { "Ref" : "KeyName" },
          "SSHFrom"        : { "Ref" : "SSHFrom" },
          "PrimaryAZ"      : { "Ref" : "PrimaryAZ" },
          "SecondaryAZ"    : { "Ref" : "SecondaryAZ" },
          "DomainName"     : { "Ref" : "DomainName" },
          "TemplateBucket" : { "Ref" : "TemplateBucket" },
          "StackNameOrId"  : { "Ref" : "AWS::StackName" },
          "CfnAccessKey"   : { "Ref" : "CfnAccessKey" },
          "CfnSecretKey"   : { "Fn::GetAtt" : [ "CfnAccessKey", "SecretAccessKey" ] }
        }
      }
    },

    "Mongo01" : {
      "Type" : "AWS::CloudFormation::Stack",
      "Metadata" : {
        "Comment" : "MongoDB Server 01"
      },
      "Properties" : {
        "TemplateURL"      : { "Fn::Join" : ["/", [ "https://s3.amazonaws.com", { "Ref" : "TemplateBucket" }, { "Ref" : "AWS::Region" }, "mongo-master.template" ] ] },
        "Parameters" : {
          "KeyName"        : { "Ref" : "KeyName" },
          "InstanceType"   : "t1.micro",
          "HostName"       : "mongo01",
          "DomainName"     : { "Ref" : "DomainName" },
          "ReplicaSetName" : "vpc",
          "VpcId"          : { "Ref" : "VPC" },
          "SubnetId"       : { "Fn::GetAtt" : [ "VPC", "Outputs.PrimarySubnetId" ] },
          "StackNameOrId"  : { "Ref" : "AWS::StackName" },
          "CfnAccessKey"   : { "Ref" : "CfnAccessKey" },
          "CfnSecretKey"   : { "Fn::GetAtt" : [ "CfnAccessKey", "SecretAccessKey" ] },
          "DefaultSecurityGroupId"  : { "Fn::GetAtt" : [ "VPC", "Outputs.DefaultSecurityGroupId" ] },
          "DatabaseSecurityGroupId" : { "Fn::GetAtt" : [ "VPC", "Outputs.DatabaseSecurityGroupId" ] }
        }
      }
    }
  },

  "Outputs" : {
    "VpcId" : {
      "Value" : { "Fn::GetAtt": [ "VPC", "Outputs.VpcId" ] }
    },
    "RemoteAccess" : {
      "Value" : { "Fn::GetAtt": [ "VPC", "Outputs.RemoteAccess" ] }
    }
  }
}
